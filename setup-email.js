#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('üîß Configuraci√≥n de Email para Inform√°tica M√©dica');
console.log('='.repeat(50));
console.log('');

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setupEmail() {
    try {
        console.log('Para configurar el env√≠o de emails, necesitamos algunos datos:');
        console.log('');
        
        const emailUser = await question('üìß Tu email de Gmail: ');
        const emailPass = await question('üîë App Password de Gmail (no tu contrase√±a normal): ');
        const professorEmail = await question('üë®‚Äçüè´ Email del profesor para recibir notificaciones: ');
        
        console.log('');
        console.log('‚ÑπÔ∏è  Para obtener un App Password de Gmail:');
        console.log('   1. Ve a https://myaccount.google.com/security');
        console.log('   2. Activa la verificaci√≥n en 2 pasos');
        console.log('   3. Ve a "App passwords" y genera una nueva');
        console.log('   4. Usa esa contrase√±a de 16 caracteres aqu√≠');
        console.log('');
        
        const confirm = await question('¬øContinuar con la configuraci√≥n? (s/n): ');
        
        if (confirm.toLowerCase() !== 's' && confirm.toLowerCase() !== 'si') {
            console.log('‚ùå Configuraci√≥n cancelada');
            rl.close();
            return;
        }

        // Leer el archivo .env actual
        const envPath = path.join(__dirname, '.env');
        let envContent = '';
        
        if (fs.existsSync(envPath)) {
            envContent = fs.readFileSync(envPath, 'utf8');
        }

        // Actualizar o agregar configuraciones de email
        const emailConfig = `
# Configuraci√≥n de email (Gmail)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=${emailUser}
EMAIL_PASS=${emailPass}
EMAIL_FROM_NAME=Inform√°tica M√©dica
EMAIL_FROM_ADDRESS=${emailUser}

# Email del profesor (para recibir notificaciones)
PROFESSOR_EMAIL=${professorEmail}
`;

        // Si el archivo .env no existe, crear uno b√°sico
        if (!envContent) {
            envContent = `# Configuraci√≥n del servidor
PORT=3000
NODE_ENV=development

# Configuraci√≥n JWT
JWT_SECRET=tu_clave_secreta_super_segura_aqui_2024

# Configuraci√≥n de archivos
MAX_FILE_SIZE=10485760
`;
        }

        // Remover configuraciones de email existentes
        envContent = envContent.replace(/# Configuraci√≥n de email.*?PROFESSOR_EMAIL=.*$/gms, '');
        
        // Agregar nueva configuraci√≥n
        envContent += emailConfig;

        // Escribir archivo .env
        fs.writeFileSync(envPath, envContent.trim() + '\n');

        console.log('');
        console.log('‚úÖ Configuraci√≥n de email guardada en .env');
        console.log('');
        console.log('üöÄ Para probar la configuraci√≥n:');
        console.log('   1. Reinicia el servidor: npm run dev');
        console.log('   2. Sube un archivo de prueba');
        console.log('   3. Verifica que lleguen los emails');
        console.log('');
        console.log('üìß Se enviar√°n emails a:');
        console.log(`   - Estudiante: ${emailUser} (confirmaci√≥n)`);
        console.log(`   - Profesor: ${professorEmail} (notificaci√≥n)`);

    } catch (error) {
        console.error('‚ùå Error en la configuraci√≥n:', error.message);
    } finally {
        rl.close();
    }
}

setupEmail();
